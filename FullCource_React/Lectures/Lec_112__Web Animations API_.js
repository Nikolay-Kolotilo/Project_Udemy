/*Lec_112__Web Animations API.  https://html5book.ru/css3-animation
1:00. Animation конструктор - https://developer.mozilla.org/en-US/docs/Web/API/Animation/Animation
1:35. Эффекты (передаются в конструктор):
        1 аргумент (объект). KeyframeEffect - https://developer.mozilla.org/en-US/docs/Web/API/KeyframeEffect
            передаются те анимации, которые должы будут воспроизвестись (похожие на CSS3).
        2 аргумент. timeline стандартное течение времени на странице.
2:35. Использование метода Animate на элементе страницы. https://developer.mozilla.org/ru/docs/Web/API/Element/animate
        Метод animate() интерфейса Element это быстрый способ создания Animation, 
        которая сразу применяется к элементу, а затем проигрывает эту анимацию. 
        Метод возвращает созданный экземпляр класса Animation.
3:20. Создание анимации из урока. phoneAnimation:

*/
const btnPhone = document.querySelector('#iphone'),
      btnMacbook = document.querySelector('#macbook'),
      images = document.querySelectorAll('img');
const phoneAnimation = images[0].animate([ //Метод возвращает созданный экземпляр класса Animation.
        //Принимает 2 аргумента: var animation = element.animate(keyframes, options);
    {transform: 'translateY(0)'},//5:00. Первым аргуметом передаем массив, массив объектов с ключевыми кадрами. Тоесть это начальная точка,
    {transform: 'translateY(100px)'},//промежуточные точки и конечная. Ключевые кадры это какие-то CSS свойства.
    {transform: 'translateY(-100px)'},
    { transform: 'translateY(0)' } //5:00. Свойства могут быть любыми.
], {//5:55 Далее передаем options, перечень см. внизу файла
    duration: 3000,
    iterations: Infinity,
}); 
//Управление при помощи кнопки.

//7:25. Методы Animation и обработчики событий.
btnPhone.addEventListener('click', () => {
    if (!phoneAnimation) {
        phoneAnimation = images[0].animate([
        {transform: 'translateY(0)'},
        {transform: 'translateY(100px)'},
        {transform: 'translateY(-100px)'},
        { transform: 'translateY(0)'}  
        ], {
            duration: 3000,
        iterations: Infinity,
        }); 
    } else if(phoneAnimation.playState === 'paused'){//9:40  https://developer.mozilla.org/en-US/docs/Web/API/Animation/pause
        //Если стоит на паузе - тогда используем метод Плей: https://developer.mozilla.org/en-US/docs/Web/API/Animation/play
        phoneAnimation.play();
    } else {
        phoneAnimation.pause();//10:40
    }
});
//11:50. Усложнение анимации.





/*Список опций на 27.01.23 options:
Целое число**, представляющее продолжительность анимации** (в миллисекундах), или объект, 
содержащий одно или более временных свойств.

id Необязательный. Свойство уникальное для animate(): DOMString, с помощью которого можно ссылаться на анимацию.

delay (en-US) Необязательный. Число миллисекунд для задержки начала анимации. По умолчанию 0.

direction (en-US) Необязательный. Указывает направление анимации. Она может выполняться вперёд (normal), 
                назад (reverse), переключать направление после каждой итерации (alternate), 
                или работать назад и переключать после каждой итерации (alternate-reverse). По умолчанию "normal".
duration (en-US) Необязательный. Число миллисекунд, в течении которых выполняется каждая итерация анимации. 
                По умолчанию 0. Хотя это свойство технически необязательное, имейте ввиду, 
                что ваша анимация не будет запущена, если это значение равно 0.
easing (en-US) Необязательный. Скорость изменения анимации с течением времени. 
                Принимает заранее определённые значения "linear", "ease", "ease-in", "ease-out", 
                и "ease-in-out", или кастомное "cubic-bezier" со значением типа "cubic-bezier(0.42, 0, 0.58, 1)". 
                По умолчанию "linear".
endDelay (en-US) Необязательный. Число миллисекунд задержки после окончания анимации. 
                Это в первую очередь полезно, когда последовательность действий анимации базируется 
                на окончании другой анимации. По умолчанию 0.
fill (en-US) Необязательный. Диктует должны ли эффекты анимации отражаться элементом(ами) перед 
                воспроизведением ("backwards"), сохраняться после того, как анимация завершилась 
                ("forwards"), или и то и другое ("both"). По умолчанию "none".
iterationStart (en-US) Необязательный. Описывает, в какой момент итерации должна начаться анимация. 
                Например, значение 0.5 указывает на начало запуска анимации в середине первой итерации, 
                с таким набором значений анимация с 2-мя итерациями будет закончена на 
                полпути к третей итерации. По умолчанию 0.0.
iterations (en-US) Необязательный. Число раз, которое анимация должна повторяться. 
                По умолчанию 1, может принимать значение до Infinity, чтобы повторять анимацию до тех пор, 
                пока элемент существует.

Обработчики событий:
Animation.oncancel (en-US) Возвращает и задаёт обработчик событий для отмены события.
Animation.onfinish (en-US) Возвращает и задаёт обработчик событий для завершения события.

Методы:
Animation.cancel() Очищает все keyframeEffects (en-US) вызванные этой анимацией и прекращает его выполнение.
                animation.commitStyles() (en-US) Фиксирует конечное состояние стиля анимации 
                к анимируемому элементу, даже после того, как эта анимация была удалена. 
                Это приведёт к тому, что конечное состояние стиля будет записано в анимируемый 
                элемент в виде свойств внутри атрибута стиля.
Animation.finish() Ищет конец анимации, в зависимости от того, играет ли анимация или инвертирует.
Animation.pause() Приостанавливает запущенную анимацию.
animation.persist() Анимация сохраняется в явном виде, когда в противном случае она была бы удалена 
                из-за поведения браузера, которое предполагает автоматическое удаление анимаций заполнения.
Animation.play() Запускает или продолжает выполнение анимации или начинает анимацию снова, если она ранее завершилась.
Animation.reverse() Меняет направление воспроизведения, останавливаясь в начале анимации. Если анимация закончена или не запущена, то будет проигрываться с конца к началу.
Animation.updatePlaybackRate() (en-US) Задаёт скорость анимации после синхронизации её положения воспроизведения.
*/
