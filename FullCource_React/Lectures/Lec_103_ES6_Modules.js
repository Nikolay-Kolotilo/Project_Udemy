/*Lec_103_ES6Modules
00:20. Синтаксис стандарта ES6 - Modules.
        - первое ключевое слово export.
*/

export let one = 1;

let two = 2;
export {two}; // обязательно заключать в фигурные скобки.

export function sayHi() {//1:15 Возможен экспорт и функций.
    console.log('Hello');
}
//1:35. Для экспорта главное, чтоб у экспортируемой сущности было свое имя.

//      - второе ключевое слово 'import': import { one, two } from './main';

//2:20. фигурные скобки обязательны!

import { one, two } from './main';

//2:35. После импортирования эти данные уже можно использовать:

    /*1 вариант*/    console.log(`${one} and ${two}`);
//2:55. Но эту структуру также необходимо собирать в одно целое:
//3:20. Запускаем npx webpack, в консоли получаем "1 and 2".
//3:45. Дополнительные возможности такого синтаксиса. При импорте можем сразу переименовать
// его прямо в скобках:

    /*2 вариант*/    import { one as first } from './main';
console.log(first);

    /*3 вариант*/    
//4:25. Также можем импортировать все из предыдущего файла. '*'
import * as data from './main';
console.log(`${data.one} and ${data.two}`);

    /*4 вариант*/    
data.sayHi();// Методы импортируемых объектов также доступны.
/*5:25. В консоли получаем:
1 and 2
Hello
В целом все данные, которые мы вытягиваем их другого скрипта мы вытягиваем в виде одного объекта 
и деструктуриуем его.
*/

    /*5 вариант Экспорт по умолчанию*/    
//5:55 - Экспорт по умолчанию, он может быть только один: export default 

export default function sayHi() {//1:15 Возможен экспорт и функций.
    console.log('Hello');
}
// При импорте файла с export default:

import { one, two } from './main';
import sayHi from './main';

console.log(`${one} and ${two}`);
sayHi();//6:45 В таком случае ее можно использовать в прямом виде без присвоения переменной.
/*7:00. В консоли получаем:
1 and 2
Hello
Экспорт по умолчанию должен быть только один.
*/

//7:25 Внутри js это выглядит как:
import {defaukt as sayHi} from './main';

    /*6 вариант Атрибут type module*/
//8:05 6.1 Правило - Для этого должны быть настроены экспорты и импорты и index.html:
//Первым файлом подключаем main.js, а после него второй файл script.js:
    <script src="./js/main.js"></script>
    <script src="./js/script.js"></script>
//Также небходимо соблюсти условие в теге:

    <script type='module' src="./js/main.js"></script> // Работат также как если б ми использовали атрибуд defer.
    <script type='module' src="./js/script.js"></script>

//9:00 Но самостоятельно браузер все равно собрать не сможет
//9:25 6.2 Правило - Надо правильно прописывать пути в скриптах:
// теперь надо вместо './main' писать './main.js', тоесть в расширением.
/*7:00. В консоли также получаем:
1 and 2
Hello
Экспорт по умолчанию должен быть только один.
*/